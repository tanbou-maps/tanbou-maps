import React, { useState, useEffect } from 'react';
import { Star, Send, X } from 'lucide-react';

const MapSearchComponent = () => {
  const [spots, setSpots] = useState([]);
  const [selectedSpot, setSelectedSpot] = useState(null);
  const [showReviewForm, setShowReviewForm] = useState(false);
  const [review, setReview] = useState({ rating: 0, comment: '' });

  // レビューフォームコンポーネント
  const ReviewForm = () => (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4">
      <div className="bg-white rounded-lg p-6 w-full max-w-md">
        <div className="flex justify-between items-center mb-4">
          <h3 className="text-xl font-bold">レビューを投稿</h3>
          <button onClick={() => setShowReviewForm(false)} className="text-gray-500 hover:text-gray-700">
            <X size={24} />
          </button>
        </div>

        <div className="mb-4">
          <p className="font-medium mb-2">評価</p>
          <div className="flex gap-2">
            {[1, 2, 3, 4, 5].map((star) => (
              <button
                key={star}
                onClick={() => setReview({ ...review, rating: star })}
                className={`${review.rating >= star ? 'text-yellow-400' : 'text-gray-300'}`}
              >
                <Star size={24} fill={review.rating >= star ? 'currentColor' : 'none'} />
              </button>
            ))}
          </div>
        </div>

        <div className="mb-4">
          <label className="block font-medium mb-2">コメント</label>
          <textarea
            value={review.comment}
            onChange={(e) => setReview({ ...review, comment: e.target.value })}
            className="w-full border rounded-lg p-2 h-32"
            placeholder="スポットの感想を書いてください"
          />
        </div>

        <button
          className="w-full bg-blue-600 text-white rounded-lg py-2 px-4 flex items-center justify-center gap-2 hover:bg-blue-700"
          onClick={() => handleSubmitReview()}
        >
          <Send size={18} />
          投稿する
        </button>
      </div>
    </div>
  );

  // スポット情報ウィンドウコンポーネント
  const SpotInfoWindow = () => (
    <div className="absolute bottom-24 left-4 bg-white rounded-lg shadow-lg p-4 max-w-sm">
      <h3 className="text-lg font-bold mb-2">{selectedSpot?.name}</h3>
      <p className="text-gray-600 mb-4">{selectedSpot?.description}</p>
      <div className="flex justify-between items-center">
        <button
          onClick={() => setShowReviewForm(true)}
          className="bg-blue-600 text-white rounded-lg py-2 px-4 hover:bg-blue-700"
        >
          レビューを書く
        </button>
        <button
          onClick={() => window.location.href = `/spots/${selectedSpot.id}`}
          className="text-blue-600 hover:text-blue-800"
        >
          詳細を見る
        </button>
      </div>
    </div>
  );

  // レビュー送信処理
  const handleSubmitReview = async () => {
    try {
      const response = await fetch(`/api/spots/${selectedSpot.id}/reviews`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(review),
      });

      if (response.ok) {
        setShowReviewForm(false);
        setReview({ rating: 0, comment: '' });
        // 成功通知を表示
      }
    } catch (error) {
      console.error('Error submitting review:', error);
    }
  };

  return (
    <div className="relative h-screen">
      <div
        id="spot-map"
        className="w-full h-full"
      />
      {selectedSpot && <SpotInfoWindow />}
      {showReviewForm && <ReviewForm />}
    </div>
  );
};

export default MapSearchComponent;
